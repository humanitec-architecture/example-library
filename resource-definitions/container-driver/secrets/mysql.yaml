# This Resource Definition shows how to inject secret values into a container run by the Container Driver
# to create a MySQL database in a MySQL instance. It does not show how to actually create the db.
# It reads secret values from a downstream "mysql-instance" Resource and shows how to inject them
# as environment variables into the runner container
apiVersion: entity.humanitec.io/v1b1
kind: Definition
metadata:
  id: container-driver-secrets-example-mysql
entity:
  name: container-driver-secrets-example-mysql
  type: mysql
  driver_type: humanitec/container
  driver_account: my-aws-cloud-account
  driver_inputs:
    values:
      # Source job and cluster configuration from a config resource
      job: ${resources['config.runner'].outputs.job}
      cluster: ${resources['config.runner'].outputs.cluster}
      # Needed to authenticate to aws TF provider in the TF code passed via files inputs
      # These values are provided via the `driver_account` configured above
      credentials_config:
        environment:
          AWS_ACCESS_KEY_ID: AccessKeyId
          AWS_SECRET_ACCESS_KEY: SecretAccessKey
      # Change to match your IaC code repository
      source:
        ref: refs/heads/main
        url: https://github.com/my-org/my-repo.git
    # All references to secret outputs of another resource MUST be placed in the `secret_refs` section
    secret_refs:
      job:
        # Setting environment variables in the container to be picked up by Terraform code
        variables:
          TF_VAR_mysql-instance-username:
            value: ${resources['mysql-instance.default'].outputs.username}
          TF_VAR_mysql-instance-password:
            value: ${resources['mysql-instance.default'].outputs.password}
      source:
        # Read a GitHub Personal Access Token for repo access from a secret store
        password:
          store: my-secret-store
          ref: my-path-to-git-token
  # Adjust matching criteria as required
  criteria:
  - app_id: container-driver-secrets-example

